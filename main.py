import telebot
from telebot import types
import logging
from config import BOT_TOKEN, ADMIN_CHAT_ID
from database.materials_lib import MATERIALS, MATERIAL_GROUPS
from database.tools_lib import TURNING_TOOLS, MILLING_TOOLS, OPERATIONS
from calculations.turning_calc import TurningCalculator
from calculations.milling_calc import MillingCalculator
from utils.keyboards import Keyboards


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(BOT_TOKEN)

class UserState:
    def __init__(self):
        self.reset()
        
    def reset(self):
        self.process_type = None  # turning/milling
        self.operation = None
        self.material = None
        self.tool = None
        self.calculator = None
        self.awaiting_input = None  # diameter/teeth/etc

user_states = {}

def get_user_state(user_id):
    if user_id not in user_states:
        user_states[user_id] = UserState()
    return user_states[user_id]

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def format_turning_result(result):
    return (
        f"‚öôÔ∏è *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ–∫–∞—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:*\n\n"
        f"üîß –û–ø–µ—Ä–∞—Ü–∏—è: {result['operation']}\n"
        f"üìè –ú–∞—Ç–µ—Ä–∏–∞–ª: {result['material']}\n"
        f"üõ† –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {result['tool']}\n"
        f"üìê –î–∏–∞–º–µ—Ç—Ä: {result['diameter']} –º–º\n\n"
        f"‚ö° *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n"
        f"- –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∑–∞–Ω–∏—è: {result['speed']} –º/–º–∏–Ω\n"
        f"- –ü–æ–¥–∞—á–∞: {result['feed']} –º–º/–æ–±\n"
        f"- –û–±–æ—Ä–æ—Ç—ã: {result['rpm']} –æ–±/–º–∏–Ω\n\n"
        f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –°–û–ñ –¥–ª—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è\n"
        f"‚Ä¢ –î–ª—è —á–∏—Å—Ç–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –ø–æ–¥–∞—á—É –Ω–∞ 20%"
    )

def format_milling_result(result):
    response = (
        f"‚öôÔ∏è *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω–∏—è:*\n\n"
        f"üîß –û–ø–µ—Ä–∞—Ü–∏—è: {result['operation']}\n"
        f"üìè –ú–∞—Ç–µ—Ä–∏–∞–ª: {result['material']}\n"
        f"üõ† –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {result['tool']}\n"
        f"üìê –î–∏–∞–º–µ—Ç—Ä —Ñ—Ä–µ–∑—ã: {result['diameter']} –º–º\n"
        f"ü¶∑ –ó—É–±—å–µ–≤: {result['teeth']}\n\n"
        f"‚ö° *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n"
        f"- –°–∫–æ—Ä–æ—Å—Ç—å: {result['speed']} –º/–º–∏–Ω\n"
        f"- –ü–æ–¥–∞—á–∞ –Ω–∞ –∑—É–±: {result['feed_per_tooth']} –º–º/–∑—É–±\n"
        f"- –û–±–æ—Ä–æ—Ç—ã: {result['rpm']} –æ–±/–º–∏–Ω\n"
        f"- –ú–∏–Ω—É—Ç–Ω–∞—è –ø–æ–¥–∞—á–∞: {result['feed_rate']} –º–º/–º–∏–Ω\n"
    )
    
    if result['operation'] == "–°–ø–∏—Ä–∞–ª—å–Ω–æ–µ —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω–∏–µ":
        response += (
            f"\nüåÄ *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ø–∏—Ä–∞–ª–∏:*\n"
            f"- –®–∞–≥ –º–µ–∂–¥—É –ø—Ä–æ—Ö–æ–¥–∞–º–∏: {result['step_over']} –º–º\n"
            f"- –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–∞—á–∞: {result['plunge_rate']} –º–º/–º–∏–Ω\n"
            f"- –ì–ª—É–±–∏–Ω–∞ —Ä–µ–∑–∞–Ω–∏—è: {result['cutting_depth']} –º–º\n"
            f"\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–ø—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–µ–∑—ã\n"
            f"‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å 70% –æ—Ç —Ä–∞—Å—á–µ—Ç–Ω–æ–π –ø–æ–¥–∞—á–∏"
        )
    return response

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['start', 'help'])
def handle_start(message):
    user = get_user_state(message.from_user.id)
    user.reset()
    bot.send_message(message.chat.id,
                   "üîß *CNC Cutting Bot*\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                   reply_markup=Keyboards.main_menu(),
                   parse_mode='Markdown')

@bot.message_handler(func=lambda msg: msg.text in ["–¢–æ–∫–∞—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", "–§—Ä–µ–∑–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"])
def handle_process_type(message):
    user = get_user_state(message.from_user.id)
    user.process_type = "turning" if message.text == "–¢–æ–∫–∞—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞" else "milling"
    user.calculator = TurningCalculator() if user.process_type == "turning" else MillingCalculator()
    
    bot.send_message(message.chat.id,
                   f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:",
                   reply_markup=Keyboards.operations_menu(user.process_type))

@bot.message_handler(func=lambda msg: msg.text in OPERATIONS['turning'] + OPERATIONS['milling'])
def handle_operation(message):
    user = get_user_state(message.from_user.id)
    user.operation = message.text
    bot.send_message(message.chat.id,
                   "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞:",
                   reply_markup=Keyboards.material_groups())

@bot.message_handler(func=lambda msg: msg.text in MATERIAL_GROUPS.keys())
def handle_material_group(message):
    user = get_user_state(message.from_user.id)
    user.material_group = message.text
    bot.send_message(message.chat.id,
                   "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:",
                   reply_markup=Keyboards.materials_from_group(message.text))

@bot.message_handler(func=lambda msg: msg.text in MATERIALS.keys())
def handle_material(message):
    user = get_user_state(message.from_user.id)
    user.material = MATERIALS[message.text]
    bot.send_message(message.chat.id,
                   "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:",
                   reply_markup=Keyboards.tools_menu(user.process_type))

# –¢–æ–∫–∞—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
@bot.message_handler(func=lambda msg: msg.text in TURNING_TOOLS.keys())
def handle_turning_tool(message):
    user = get_user_state(message.from_user.id)
    user.tool = TURNING_TOOLS[message.text]
    user.awaiting_input = "turning_diameter"
    bot.send_message(message.chat.id,
                   "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–º–µ—Ç—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –º–º:",
                   reply_markup=types.ReplyKeyboardRemove())
    
    

# –§—Ä–µ–∑–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
@bot.message_handler(func=lambda msg: msg.text in MILLING_TOOLS.keys())
def handle_milling_tool(message):
    user = get_user_state(message.from_user.id)
    user.tool = MILLING_TOOLS[message.text]
    
    if user.operation == "–°–ø–∏—Ä–∞–ª—å–Ω–æ–µ —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω–∏–µ":
        user.awaiting_input = "spiral_params"
        text = ("üåÄ *–°–ø–∏—Ä–∞–ª—å–Ω–æ–µ —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω–∏–µ*\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
                "<–î–∏–∞–º–µ—Ç—Ä —Ñ—Ä–µ–∑—ã> <–ó—É–±—å—è> <–ì–ª—É–±–∏–Ω–∞>\n"
                "–ü—Ä–∏–º–µ—Ä: 12 4 20")
    else:
        user.awaiting_input = "milling_params"
        text = ("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
                "<–î–∏–∞–º–µ—Ç—Ä —Ñ—Ä–µ–∑—ã> <–ó—É–±—å—è>\n"
                "–ü—Ä–∏–º–µ—Ä: 12 4")
    
    bot.send_message(message.chat.id,
                   text,
                   reply_markup=types.ReplyKeyboardRemove(),
                   parse_mode='Markdown')

@bot.message_handler(func=lambda msg: True)
def handle_input(message):
    user = get_user_state(message.from_user.id)
    
    try:
        if user.awaiting_input == "turning_diameter":
            diameter = float(message.text)
            result = user.calculator.calculate(
                material=user.material,
                tool=user.tool,
                operation=user.operation,
                diameter=diameter
            )
            response = format_turning_result({
                **result,
                "material": user.material.name,
                "tool": user.tool.name,
                "diameter": diameter
            })
            user.reset()
            
        elif user.awaiting_input == "milling_params":
            diameter, teeth = map(float, message.text.split())
            result = user.calculator.calculate(
                material=user.material,
                tool=user.tool,
                operation=user.operation,
                diameter=diameter,
                teeth=int(teeth)
            )
            response = format_milling_result({
                **result,
                "material": user.material.name,
                "tool": user.tool.name,
                "diameter": diameter,
                "teeth": int(teeth)
            })
            user.reset()
            
        elif user.awaiting_input == "spiral_params":
            diameter, teeth, depth = map(float, message.text.split())
            result = user.calculator.calculate(
                material=user.material,
                tool=user.tool,
                operation=user.operation,
                diameter=diameter,
                teeth=int(teeth),
                cutting_depth=depth
            )
            response = format_milling_result({
                **result,
                "material": user.material.name,
                "tool": user.tool.name,
                "diameter": diameter,
                "teeth": int(teeth),
                "cutting_depth": depth
            })
            user.reset()
            
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–≤–æ–¥")
            
        bot.send_message(message.chat.id,
                       response,
                       reply_markup=Keyboards.main_menu(),
                       parse_mode='Markdown')
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {str(e)}")
        error_text = {
            "turning_diameter": "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –¥–∏–∞–º–µ—Ç—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50.5)",
            "milling_params": "–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12 4)",
            "spiral_params": "–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12 4 20)"
        }.get(user.awaiting_input, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
        
        bot.send_message(message.chat.id,
                       f"‚ùå –û—à–∏–±–∫–∞! {error_text}",
                       reply_markup=Keyboards.main_menu())
        
    except Exception as e:
        logger.error(f"–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        bot.send_message(message.chat.id,
                       "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                       reply_markup=Keyboards.main_menu())

if __name__ == "__main__":
    logger.info(" ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    try:
        #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        bot.send_message(
            ADMIN_CHAT_ID,
            "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')

    bot.polling(none_stop=True)

    